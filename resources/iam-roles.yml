Resources:
# IAM role used for authenticated users
  CognitoAuthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "${env:AppName}-${env:Stage}-CognitoAuthRole"
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition: 
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": 
                  Ref: CognitoIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "${env:AppName}-${env:Stage}-CognitoAuthorizedPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "execute-api:Invoke"
                Resource:
                  - {
                    "Fn::Join": [
                      "", [
                        "arn:aws:execute-api:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":",
                        {
                          "Ref": "ApiGatewayRestApi"
                        },
                        "/*"
                      ]
                    ]
                  }

  CognitoUnAuthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ${env:AppName}-${env:Stage}-CognitoUnAuthRole
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition: 
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": 
                  Ref: CognitoIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: "${env:AppName}-${env:Stage}-CognitoUnAuthorizedPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                Resource: "*"

  
  AllLambdaFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ${env:AppName}-${env:Stage}-AllLambdaFunctionsRole
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal:
              Service: [lambda.amazonaws.com]
            Action:
                - sts:AssumeRole
      Policies:
        - PolicyName: "${env:AppName}-${env:Stage}-AllLambdaFunctionsRolePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - sts:AssumeRole
                  - sts:AssumeRoleWithSAML
                Resource: 
                  - "Fn::Join":
                      - ":"
                      - - "arn:aws:iam:"
                        - Ref: "AWS::AccountId"
                        - "role/${env:AppName}-${env:Stage}-*"
              - Effect: "Allow"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - {
                    "Fn::Join": [
                      ":", [
                        "arn:aws:logs",
                        {
                          "Ref": "AWS::Region"
                        },
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "log-group:/aws/lambda/*:*:*",
                      ]
                    ]
                  }


  CognitoUserPoolAdminGroupRole:
    Type: AWS::IAM::Role
    DependsOn: AllLambdaFunctionsRole
    Properties:
      RoleName: ${env:AppName}-${env:Stage}-CognitoUserPoolAdminGroupRole
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal:
              Service: 
                - lambda.amazonaws.com
              AWS: 
                - Fn::Join:
                    - ":"
                    - - "arn:aws:iam:"
                      - Ref: "AWS::AccountId"
                      - "role/${env:AppName}-${env:Stage}-AllLambdaFunctionsRole"
            Action:
              - "sts:AssumeRole"
            # Condition:
            #         StringEquals:
            #           "sts:ExternalId":""
     
                                
  CognitoUserPoolCustomerGroupRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ${env:AppName}-${env:Stage}-CognitoUserPoolCustomerGroupRole
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": 
                  Ref : CognitoIdentityPool
              "ForAnyValue:StringLike": 
                "cognito-identity.amazonaws.com:amr": "authenticated"