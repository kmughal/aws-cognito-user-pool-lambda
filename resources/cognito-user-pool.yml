Resources:
  CognitoUserPoolMyUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: "${env:AppName}-${env:Stage}-UserPool"

      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          EmailMessage: "Your username is {username} and temporary password is {####}. "
          EmailSubject: Your temporary password
          SMSMessage: "Your username is {username} and temporary password is {####}. "
        # UnusedAccountValidityDays: 1
      AliasAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      # EmailConfiguration:
      #   EmailSendingAccount: DEVELOPER
      #   ReplyToEmailAddress: <<your email address >>
      #   SourceArn: arn:aws:ses:eu-west-1:815800722322:identity/<<email-address>>
      # EmailVerificationMessage: "Your verification code is <h1>{####}</h1>. "
      # EmailVerificationSubject: Your verification code
      LambdaConfig: {}
      MfaConfiguration: OFF
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
        - Name: sub
          AttributeDataType: String
          Mutable: false
          Required: false
          StringAttributeConstraints:
            MaxLength: "2048"
            MinLength: "1"
        - Name: given_name
          AttributeDataType: String
          Mutable: true
          Required: false
          StringAttributeConstraints:
            MaxLength: "2048"
            MinLength: "0"
        - Name: family_name
          AttributeDataType: String
          Mutable: true
          Required: false
          StringAttributeConstraints:
            MaxLength: "2048"
            MinLength: "0"
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: false
          StringAttributeConstraints:
            MaxLength: "2048"
            MinLength: "0"

      SmsAuthenticationMessage: "Your authentication code is {####}. "
      SmsVerificationMessage: "Your verification code is {####}. "
      UserPoolTags: {}
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailMessage: "Your verification code is <h1>{####}</h1>. "
        EmailMessageByLink:
          "Please click the link below to verify your email address.
          {##Verify Email##} "
        EmailSubject: Your verification code
        EmailSubjectByLink: Your verification link
        SmsMessage: "Your verification code is {####}. "

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ${env:AppName}-${env:Stage}-UserPoolClient
      SupportedIdentityProviders:
        - "COGNITO"
      # PreventUserExistenceErrors: "ENABLED"
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      CallbackURLs:
        - http://localhost:9000/myapp
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
      ReadAttributes:
        - address
        - birthdate
        - email
        - email_verified
        - family_name
        - gender
        - given_name
        - locale
        - middle_name
        - name
        - nickname
        - phone_number
        - phone_number_verified
        - picture
        - preferred_username
        - profile
        - updated_at
        - website
        - zoneinfo

      RefreshTokenValidity: 30
      UserPoolId:
        Ref: CognitoUserPoolMyUserPool
      GenerateSecret: false
      WriteAttributes:
        - address
        - birthdate
        - email
        - family_name
        - gender
        - given_name
        - locale
        - middle_name
        - name
        - nickname
        - phone_number
        - picture
        - preferred_username
        - profile
        - updated_at
        - website
        - zoneinfo

  CognitoUserPoolGroupA:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: "${env:AdminGroupDescription}"
      GroupName: "${env:AdminGroupName}"
      RoleArn:
        Fn::GetAtt: [CognitoUserPoolAdminGroupRole, Arn]
      UserPoolId:
        Ref: CognitoUserPoolMyUserPool
  # All users who register when invited by the Super Admin and have Supervisor
  CognitoUserPoolGroupB:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: "${env:ClientGroupDescription}"
      GroupName: "${env:ClientGroupName}"
      RoleArn:
        Fn::GetAtt: [CognitoUserPoolCustomerGroupRole, Arn]
      UserPoolId:
        Ref: CognitoUserPoolMyUserPool

#Print out the Id of the user pool that is created
Outputs:
  CognitoUserPoolApplicationUserPoolId:
    Value:
      Ref: CognitoUserPoolMyUserPool
  CognitoUserPoolApplicationUserPoolClientId:
    Value:
      Ref: CognitoUserPoolClient
  UserPoolId:
    Value:
      Ref: CognitoUserPoolMyUserPool

  UserPoolClientId:
    Value:
      Ref: CognitoUserPoolClient
